// <auto-generated />
using System;
using EnterpriseITAgent.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EnterpriseITAgent.Migrations
{
    [DbContext(typeof(EnterpriseDbContext))]
    partial class EnterpriseDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.8");

            modelBuilder.Entity("EnterpriseITAgent.Models.BackupChunk", b =>
                {
                    b.Property<string>("ChunkId")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "chunkId");

                    b.Property<string>("ChunkHash")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "chunkHash");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "createdAt");

                    b.Property<int>("CurrentReplicas")
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "currentReplicas");

                    b.Property<string>("FileHash")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "fileHash");

                    b.Property<bool>("IsEncrypted")
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "isEncrypted");

                    b.Property<DateTime>("LastVerified")
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "lastVerified");

                    b.Property<string>("ReplicatedNodes")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "replicatedNodes");

                    b.Property<int>("SequenceNumber")
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "sequenceNumber");

                    b.Property<long>("Size")
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "size");

                    b.Property<string>("StoragePath")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "storagePath");

                    b.Property<int>("TargetReplicas")
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "targetReplicas");

                    b.HasKey("ChunkId");

                    b.HasIndex("ChunkHash")
                        .IsUnique();

                    b.HasIndex("FileHash");

                    b.HasIndex("FileHash", "SequenceNumber")
                        .IsUnique();

                    b.ToTable("BackupChunks");
                });

            modelBuilder.Entity("EnterpriseITAgent.Models.BackupJob", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "endTime");

                    b.Property<string>("ErrorMessage")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "errorMessage");

                    b.Property<int>("FailedFiles")
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "failedFiles");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "name");

                    b.Property<string>("NodeId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "nodeId");

                    b.Property<double>("Progress")
                        .HasColumnType("REAL")
                        .HasAnnotation("Relational:JsonPropertyName", "progress");

                    b.Property<string>("SourcePaths")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "sourcePaths");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "startTime");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "status");

                    b.Property<int>("SuccessfulFiles")
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "successfulFiles");

                    b.Property<long>("TotalBytes")
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "totalBytes");

                    b.Property<int>("TotalFiles")
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "totalFiles");

                    b.HasKey("Id");

                    b.HasIndex("NodeId");

                    b.HasIndex("StartTime");

                    b.HasIndex("Status");

                    b.ToTable("BackupJobs");
                });

            modelBuilder.Entity("EnterpriseITAgent.Models.EmailAttachment", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    b.Property<string>("ContentHash")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "contentHash");

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "contentType");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "createdAt");

                    b.Property<string>("EmailId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "emailId");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "fileName");

                    b.Property<bool>("IsEncrypted")
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "isEncrypted");

                    b.Property<int>("ReferenceCount")
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "referenceCount");

                    b.Property<long>("Size")
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "size");

                    b.Property<string>("StoragePath")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "storagePath");

                    b.HasKey("Id");

                    b.HasIndex("ContentHash");

                    b.HasIndex("EmailId");

                    b.ToTable("EmailAttachments");
                });

            modelBuilder.Entity("EnterpriseITAgent.Models.EmailMessage", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    b.Property<string>("Bcc")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "bcc");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "body");

                    b.Property<string>("Cc")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "cc");

                    b.Property<string>("Folder")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "folder");

                    b.Property<string>("From")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "from");

                    b.Property<uint>("ImapUid")
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "imapUid");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "isArchived");

                    b.Property<bool>("IsFlagged")
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "isFlagged");

                    b.Property<bool>("IsRead")
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "isRead");

                    b.Property<long>("Size")
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "size");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "subject");

                    b.Property<string>("ThreadId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "threadId");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "timestamp");

                    b.Property<string>("To")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "to");

                    b.HasKey("Id");

                    b.HasIndex("Folder");

                    b.HasIndex("ImapUid");

                    b.HasIndex("ThreadId");

                    b.HasIndex("Timestamp");

                    b.HasIndex("Folder", "ImapUid")
                        .IsUnique();

                    b.ToTable("EmailMessages");
                });

            modelBuilder.Entity("EnterpriseITAgent.Models.FileVersion", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    b.Property<string>("BackupJobId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "backupJobId");

                    b.Property<int>("ChunkCount")
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "chunkCount");

                    b.Property<string>("ChunkIds")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "chunkIds");

                    b.Property<string>("FileHash")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "fileHash");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "fileName");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "filePath");

                    b.Property<bool>("IsCurrent")
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "isCurrent");

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "lastModified");

                    b.Property<long>("Size")
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "size");

                    b.Property<string>("SourceNodeId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "sourceNodeId");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "timestamp");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "version");

                    b.HasKey("Id");

                    b.HasIndex("BackupJobId");

                    b.HasIndex("FileHash")
                        .IsUnique();

                    b.HasIndex("FilePath");

                    b.HasIndex("SourceNodeId");

                    b.ToTable("FileVersions");
                });

            modelBuilder.Entity("EnterpriseITAgent.Models.LogEntry", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    b.Property<string>("Component")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "component");

                    b.Property<string>("CorrelationId")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "correlationId");

                    b.Property<string>("Exception")
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "exception");

                    b.Property<int>("Level")
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "level");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "message");

                    b.Property<string>("NodeId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "nodeId");

                    b.Property<string>("Properties")
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "properties");

                    b.Property<string>("SessionId")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "sessionId");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "timestamp");

                    b.Property<string>("UserId")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "userId");

                    b.HasKey("Id");

                    b.HasIndex("Component");

                    b.HasIndex("Level");

                    b.HasIndex("NodeId");

                    b.HasIndex("Timestamp");

                    b.ToTable("LogEntries");
                });

            modelBuilder.Entity("EnterpriseITAgent.Models.NodeStatus", b =>
                {
                    b.Property<string>("NodeId")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "nodeId");

                    b.Property<string>("ActiveServices")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "activeServices");

                    b.Property<string>("Alerts")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "alerts");

                    b.Property<long>("AvailableBackupStorageGB")
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "availableBackupStorageGB");

                    b.Property<string>("CurrentUser")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "currentUser");

                    b.Property<bool>("IsIdle")
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "isIdle");

                    b.Property<DateTime>("LastHeartbeat")
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "lastHeartbeat");

                    b.Property<string>("MachineName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "machineName");

                    b.Property<string>("OsInfo")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "osInfo");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "version");

                    b.HasKey("NodeId");

                    b.HasIndex("LastHeartbeat");

                    b.ToTable("NodeStatus");
                });

            modelBuilder.Entity("EnterpriseITAgent.Models.BackupChunk", b =>
                {
                    b.HasOne("EnterpriseITAgent.Models.FileVersion", "FileVersion")
                        .WithMany("Chunks")
                        .HasForeignKey("FileHash")
                        .HasPrincipalKey("FileHash")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FileVersion");
                });

            modelBuilder.Entity("EnterpriseITAgent.Models.EmailAttachment", b =>
                {
                    b.HasOne("EnterpriseITAgent.Models.EmailMessage", "Email")
                        .WithMany("Attachments")
                        .HasForeignKey("EmailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Email");
                });

            modelBuilder.Entity("EnterpriseITAgent.Models.NodeStatus", b =>
                {
                    b.OwnsOne("EnterpriseITAgent.Models.SystemMetrics", "Metrics", b1 =>
                        {
                            b1.Property<string>("NodeStatusNodeId")
                                .HasColumnType("TEXT");

                            b1.Property<long>("AvailableDiskGB")
                                .HasColumnType("INTEGER")
                                .HasAnnotation("Relational:JsonPropertyName", "availableDiskGB");

                            b1.Property<long>("AvailableMemoryMB")
                                .HasColumnType("INTEGER")
                                .HasAnnotation("Relational:JsonPropertyName", "availableMemoryMB");

                            b1.Property<double>("CpuUsage")
                                .HasColumnType("REAL")
                                .HasAnnotation("Relational:JsonPropertyName", "cpuUsage");

                            b1.Property<string>("CustomMetrics")
                                .HasColumnType("TEXT")
                                .HasAnnotation("Relational:JsonPropertyName", "customMetrics");

                            b1.Property<double>("DiskUsage")
                                .HasColumnType("REAL")
                                .HasAnnotation("Relational:JsonPropertyName", "diskUsage");

                            b1.Property<double>("MemoryUsage")
                                .HasColumnType("REAL")
                                .HasAnnotation("Relational:JsonPropertyName", "memoryUsage");

                            b1.Property<long>("NetworkBytesIn")
                                .HasColumnType("INTEGER")
                                .HasAnnotation("Relational:JsonPropertyName", "networkBytesIn");

                            b1.Property<long>("NetworkBytesOut")
                                .HasColumnType("INTEGER")
                                .HasAnnotation("Relational:JsonPropertyName", "networkBytesOut");

                            b1.Property<int>("ProcessCount")
                                .HasColumnType("INTEGER")
                                .HasAnnotation("Relational:JsonPropertyName", "processCount");

                            b1.Property<DateTime>("Timestamp")
                                .HasColumnType("TEXT")
                                .HasAnnotation("Relational:JsonPropertyName", "timestamp");

                            b1.Property<long>("TotalDiskGB")
                                .HasColumnType("INTEGER")
                                .HasAnnotation("Relational:JsonPropertyName", "totalDiskGB");

                            b1.Property<long>("TotalMemoryMB")
                                .HasColumnType("INTEGER")
                                .HasAnnotation("Relational:JsonPropertyName", "totalMemoryMB");

                            b1.Property<double>("UptimeHours")
                                .HasColumnType("REAL")
                                .HasAnnotation("Relational:JsonPropertyName", "uptimeHours");

                            b1.HasKey("NodeStatusNodeId");

                            b1.ToTable("NodeStatus");

                            b1.HasAnnotation("Relational:JsonPropertyName", "metrics");

                            b1.WithOwner()
                                .HasForeignKey("NodeStatusNodeId");
                        });

                    b.Navigation("Metrics")
                        .IsRequired();
                });

            modelBuilder.Entity("EnterpriseITAgent.Models.EmailMessage", b =>
                {
                    b.Navigation("Attachments");
                });

            modelBuilder.Entity("EnterpriseITAgent.Models.FileVersion", b =>
                {
                    b.Navigation("Chunks");
                });
#pragma warning restore 612, 618
        }
    }
}
